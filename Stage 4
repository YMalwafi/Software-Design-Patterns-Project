import java.util.ArrayList;
import java.util.List;

// Main LibrarySystem Class
public class LibrarySystem {

    // Observer Design Pattern: Library and Borrowers
    public static class Library {
        private List<Book> books;
        private List<Borrower> observers;

        public Library() {
            books = new ArrayList<>();
            observers = new ArrayList<>();
        }

        public void addObserver(Borrower borrower) {
            observers.add(borrower);
        }

        public void removeObserver(Borrower borrower) {
            observers.remove(borrower);
        }

        public void notifyObservers(Book book) {
            for (Borrower observer : observers) {
                observer.update(book);
            }
        }

        public void addBook(Book book) {
            books.add(book);
            System.out.println("Added new book to library: " + book.title);
            notifyObservers(book);
        }

        public void displayLibrary() {
            System.out.println("Library Inventory:");
            for (Book book : books) {
                book.displayBookInfo();
            }
        }
    }

    public static class Book {
        private int bookId;
        private String title;
        private String author;

        public Book(int bookId, String title, String author) {
            this.bookId = bookId;
            this.title = title;
            this.author = author;
        }

        public void displayBookInfo() {
            System.out.println("Book ID: " + bookId + ", Title: " + title + ", Author: " + author);
        }
    }

    // Observer: Borrower
    public static class Borrower {
        private String name;
        private List<Book> borrowedBooks;

        public Borrower(String name) {
            this.name = name;
            this.borrowedBooks = new ArrayList<>();
        }

        public void update(Book book) {
            System.out.println(name + " is notified about a new book: " + book.title);
        }

        public void borrowBook(Book book) {
            borrowedBooks.add(book);
            System.out.println(name + " has borrowed the book: " + book.title);
        }

        public void displayBorrowedBooks() {
            System.out.println(name + "'s Borrowed Books:");
            for (Book book : borrowedBooks) {
                book.displayBookInfo();
            }
        }
    }

    // Command Design Pattern: Encapsulating Borrow and Return Actions
    public interface Command {
        void execute();
    }

    public static class BorrowBookCommand implements Command {
        private Borrower borrower;
        private Book book;

        public BorrowBookCommand(Borrower borrower, Book book) {
            this.borrower = borrower;
            this.book = book;
        }

        @Override
        public void execute() {
            borrower.borrowBook(book);
        }
    }

    public static class ReturnBookCommand implements Command {
        private Borrower borrower;
        private Book book;

        public ReturnBookCommand(Borrower borrower, Book book) {
            this.borrower = borrower;
            this.book = book;
        }

        @Override
        public void execute() {
            borrower.borrowedBooks.remove(book);
            System.out.println(borrower.name + " has returned the book: " + book.title);
        }
    }

    public static void main(String[] args) {
        // Creating library
        Library library = new Library();

        // Creating books
        Book book1 = new Book(1, "The Great Gatsby", "F. Scott Fitzgerald");
        Book book2 = new Book(2, "To Kill a Mockingbird", "Harper Lee");
        Book book3 = new Book(3, "1984", "George Orwell");

        // Creating borrowers and adding them as observers
        Borrower borrower1 = new Borrower("Mohammed");
        Borrower borrower2 = new Borrower("Aisha");
        library.addObserver(borrower1);
        library.addObserver(borrower2);

        // Adding books to the library
        library.addBook(book1);
        library.addBook(book2);

        // Command pattern: Borrowing books
        Command borrowCommand1 = new BorrowBookCommand(borrower1, book1);
        borrowCommand1.execute();

        Command borrowCommand2 = new BorrowBookCommand(borrower2, book2);
        borrowCommand2.execute();

        // Command pattern: Returning books
        Command returnCommand = new ReturnBookCommand(borrower1, book1);
        returnCommand.execute();

        // Displaying library and borrower information
        library.displayLibrary();
        borrower1.displayBorrowedBooks();
        borrower2.displayBorrowedBooks();
    }
}
