import java.util.*;

// Library System with Behavioral Design Patterns
public class LibrarySystem {

    // Observer Pattern: Borrower
    public static class Borrower {
        private String name;
        private List<Book> borrowedBooks;

        public Borrower(String name) {
            this.name = name;
            borrowedBooks = new ArrayList<>();
        }

        public void borrowBook(Book book) {
            borrowedBooks.add(book);
            System.out.println(name + " borrowed: " + book.title);
        }

        public void returnBook(Book book) {
            borrowedBooks.remove(book);
            System.out.println(name + " returned: " + book.title);
        }

        public void displayBorrowedBooks() {
            System.out.println(name + "'s Borrowed Books:");
            for (Book book : borrowedBooks) {
                book.display();
            }
        }

        public void update(Book book) {
            System.out.println(name + " notified of new book: " + book.title);
        }
    }

    // Strategy Pattern: BorrowBehavior for Borrowing Books
    public interface BorrowBehavior {
        void borrow(Book book);
    }

    public static class RegularBorrowBehavior implements BorrowBehavior {
        @Override
        public void borrow(Book book) {
            System.out.println("Borrowing as a regular user: " + book.title);
        }
    }

    public static class PriorityBorrowBehavior implements BorrowBehavior {
        @Override
        public void borrow(Book book) {
            System.out.println("Borrowing with priority: " + book.title);
        }
    }

    public static class Person {
        private String name;
        private BorrowBehavior borrowBehavior;

        public Person(String name, BorrowBehavior borrowBehavior) {
            this.name = name;
            this.borrowBehavior = borrowBehavior;
        }

        public void borrow(Book book) {
            borrowBehavior.borrow(book);
        }
    }

    // Book Class
    public static class Book {
        private int bookId;
        private String title;
        private String author;

        public Book(int bookId, String title, String author) {
            this.bookId = bookId;
            this.title = title;
            this.author = author;
        }

        public void display() {
            System.out.println("Book ID: " + bookId + ", Title: " + title + ", Author: " + author);
        }
    }

    // Main Method
    public static void main(String[] args) {
        // Borrowing behavior: Regular or Priority
        BorrowBehavior regularBehavior = new RegularBorrowBehavior();
        BorrowBehavior priorityBehavior = new PriorityBorrowBehavior();

        // Person with Strategy
        Person person1 = new Person("Ahmed", regularBehavior);
        Person person2 = new Person("Sara", priorityBehavior);

        // Books
        Book book1 = new Book(1, "The Great Gatsby", "F. Scott Fitzgerald");
        Book book2 = new Book(2, "To Kill a Mockingbird", "Harper Lee");

        // Borrowing Books
        person1.borrow(book1);
        person2.borrow(book2);

        // Borrower and Observer Pattern
        Borrower borrower = new Borrower("Mohammed");
        borrower.borrowBook(book1);
        borrower.borrowBook(book2);
        borrower.displayBorrowedBooks();
    }
}
